# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import requests as req  # –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import pandas as pd  # –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
from datetime import datetime, timedelta  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
import json  # –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ json
from clickhouse_driver import Client  # –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.utils.dates import days_ago 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ClickHouse

from airflow.hooks.base_hook import BaseHook
from airflow.models import Variable
from airflow_clickhouse_plugin.operators.clickhouse import ClickHouseOperator
from airflow.providers.telegram.operators.telegram import TelegramOperator
from airflow_clickhouse_plugin.hooks.clickhouse import ClickHouseHook
import logging

# –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ CONNECTION  exchange_rate
# url api –≤ Connections https://api.exchangerate.host/timeframe
HOST_EXCR = BaseHook.get_connection("exchange_rate").host # TODO: –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä—å —Ñ—É–Ω–∫—Ü–∏–∏
PASSWORD_EXCR = BaseHook.get_connection("exchange_rate").password
# —á—Ç–æ–±—ã –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å JSON (–ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ç–æ dict) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä deserialize_json=True
# –í Variables –¥–ª—è exchange_rate –ª–µ–∂–∏—Ç: {"s_file": "exchangerate_data.json", "csv_file": "exchangerate_data.csv"}

exchange_rate = Variable.get("exchange_rate", deserialize_json=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ö –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
def extract_data(url, s_file, **kwargs):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –≥–æ—Ç–æ–≤—ã–π url –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É –∏–∑ API
    –∏ –≤—ã–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–ª—é—Ç–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è GET-–∑–∞–ø—Ä–æ—Å,
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª `s_file`.
    """
    request = req.get(url)
    
    log = logging.getLogger("task log")
    log.info(f"HTTP –æ—Ç–≤–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –æ—Ç—á–µ—Ç–∞: {request}")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ XML) –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    with open(s_file, 'w', encoding='utf-8') as tmp_file:
        tmp_file.write(request.text)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–∞–π–ª

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏—Ö –≤ CSV
def transform_data(s_file, csv_file, **kwargs):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã.
    –í –∫–æ–Ω—Ü–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ CSV —Ñ–∞–π–ª
    """
    date = kwargs.get("date")
    with open(s_file, "r") as f:
        data = json.load(f)
    # –ü–∞—Ä—Å–∏–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ quotes
    df = pd.DataFrame.from_dict(data["quotes"], orient="index").stack().reset_index()
    df.columns = ["date", "currency_pair", "value"]
    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –Ω–∞ 2 —Å—Ç–æ–ª–±—Ü–∞
    df[["currency_source", "currency"]] = df["currency_pair"].str.extract(r"^(USD)([A-Z]+)$")
    # —Ç—É—Ç –±–µ—Ä—É date –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —Ö–æ—Ç—è —ç—Ç–æ –ø–æ–ª–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ
    #df["date"] = pd.to_datetime(df["date"])
    df["date"] = pd.to_datetime(date)
    # –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
    df.drop(columns=["currency_pair"], inplace=True)

    df.to_csv(csv_file, index=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ ClickHouse –∏–∑ CSV
def upload_to_clickhouse(csv_file, table_name, **kwargs):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç CSV —Ñ–∞–π–ª, —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤
    –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ClickHouse –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ—ë
    """
    df = pd.read_csv(csv_file)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –ï–°–õ–ò –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ –¢–û –°–û–ó–î–ê–¢–¨ –¢–ê–ë–õ–ò–¶–£
    #client.execute(f'CREATE TABLE IF NOT EXISTS {table_name} (date String, currency_source String, currency String, value Float64) ENGINE Log')

    # –ó–∞–ø–∏—Å—å data frame –≤ ClickHouse
    ch_hook = ClickHouseHook(clickhouse_conn_id='clickhouse_default')
    ch_hook.execute(f'INSERT INTO {table_name} VALUES', df.to_dict('records'))

    # TODO: –∏–∑–º–µ–Ω–∏—Ç—å –¥–≤–∏–∂–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, —Å–µ–π—á–∞—Å –≤—Å—Ç–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def on_failure_callback(context):
    dag_id = context["dag"].dag_id  # –ü–æ–ª—É—á–∞–µ–º ID DAG-–∞
    task_id = context["task_instance"].task_id  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏
    execution_date = context["execution_date"]  # –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DAG-–∞
    exception = context["exception"]  # –û—à–∏–±–∫–∞
    message = (
        f"üö® *Airflow Alert! Some shit has happened!*\n"
        f"üíÄ DAG: `{dag_id}`\n"
        f"üí£ Task: `{task_id}`\n"
        f"üìÖ Execution Date: `{execution_date}`"
    )
    send_message = TelegramOperator(
        task_id='send_message_telegram',
        telegram_conn_id='telegram_154076484',
        chat_id='-1002503497257',
        text=message,
        dag=dag)
    return send_message.execute(context=context)

def on_success_callback(context):
    dag_id = context["dag"].dag_id  # –ü–æ–ª—É—á–∞–µ–º ID DAG-–∞
    execution_date = context["execution_date"]  # –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DAG-–∞
    message = (
        f"üü¢*DAG RUN `{dag_id}` FOR `{execution_date}` COMPLETED SUCCESSFULLY*\n"
    )
    send_message = TelegramOperator(
        task_id='send_sucess_message_telegram',
        telegram_conn_id='telegram_154076484',
        chat_id='-1002503497257',
        text=message,
        dag=dag)
    return send_message.execute(context=context)

default_args = {
    #'on_success_callback': on_success_callback,  # —Å–¥–µ–ª–∞–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–∞—Å–∫–∏
    'on_failure_callback': on_failure_callback, # –ó–∞–¥–∞—á–∞ —É–ø–∞–ª–∞
    #'on_retry_callback': another_function, # –ó–∞–¥–∞—á–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è
}

with DAG(
    '154076484_ikuryakov_task_71',
    schedule_interval='@daily',  # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    start_date=datetime(2024,1,1),
    end_date=datetime(2024,1,5),
    max_active_runs=1,
    default_args=default_args,
) as dag:

    # –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–æ–≤
    extract_task = PythonOperator(
                                 task_id='extract_data',
                                 python_callable=extract_data,
                                 # –ü–µ—Ä–µ–¥–∞—á–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
                                 op_kwargs = {
                                             'url': f'{HOST_EXCR}?access_key={PASSWORD_EXCR}' + '&start_date={{ ds }}&end_date={{ ds }}&source=USD',
                                             's_file': exchange_rate['s_file'], # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                                             'date': '{{ ds }}',
                                             }
                                 )

    transform_task = PythonOperator(
                                 task_id='transform_data',
                                 python_callable=transform_data,
                                 # –ü–µ—Ä–µ–¥–∞—á–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
                                 op_kwargs = {
                                             's_file': exchange_rate['s_file'],
                                             'csv_file': exchange_rate['csv_file'],
                                             'date': '{{ ds }}',
                                             }
                                 )
    
 # –û–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    create_table = ClickHouseOperator(
                                     task_id='create_table',
                                     sql="""CREATE TABLE IF NOT EXISTS {{ params.table_name }} 
                                     (date String, currency_source String, currency String, value Float64) ENGINE Log""",
                                     clickhouse_conn_id='clickhouse_default', 
                                     params={'table_name': '154076484_ikuryakov_assign_71'},
                                     dag=dag,
                                    )

    upload_task = PythonOperator(
                                 task_id='load_data',
                                 python_callable=upload_to_clickhouse,
                                 # –ü–µ—Ä–µ–¥–∞—á–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
                                 op_kwargs = {
                                             'csv_file': exchange_rate['csv_file'],
                                             'table_name':'154076484_ikuryakov_assign_71',
                                             #'client': CH_CLIENT # —Ç–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ —Ö—É–∫
                                             }
                                 )
    
    # –û–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    create_new_order_table = ClickHouseOperator(
        task_id='create_new_order_table',
        sql='CREATE TABLE IF NOT EXISTS sandbox.ikuryakov_new_order_table (date String, order_id Int64, purchase_rub Float64, purchase_usd Float64) ENGINE Log',
        clickhouse_conn_id='clickhouse_default', 
        dag=dag,
    )
    
 # –û–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
 # –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å  {{ ds }} –∞ —Ç–∞–∫–∂–µ –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–π –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 # –¢–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ —ç—Ç –æ–≤ SQL <airflow.order>
    insert_join = ClickHouseOperator(
        task_id='insert_join',
        #TODO: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
        sql="""INSERT INTO sandbox.ikuryakov_new_order_table
            select 
                  o.date,
                  order_id,
                  purchase_rub,
                  purchase_rub / value as purchase_usd
            from airflow.orders as o
            any left join sandbox.154076484_ikuryakov_assign_71 as r
            on (r.currency='RUB'
            and o.date = r.date)
            where o.date='{{ ds }}'
            """,
        clickhouse_conn_id='clickhouse_default', 
        dag=dag,
        on_success_callback=on_success_callback 
    )

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
    extract_task >> transform_task >> [create_table, create_new_order_table] >> upload_task >> insert_join